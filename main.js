// Generated by Haxe 3.4.0
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var org_tamina_html_component_HTMLApplication = function() {
};
$hxClasses["org.tamina.html.component.HTMLApplication"] = org_tamina_html_component_HTMLApplication;
org_tamina_html_component_HTMLApplication.__name__ = ["org","tamina","html","component","HTMLApplication"];
org_tamina_html_component_HTMLApplication.get_componentsXTagList = function() {
	if(org_tamina_html_component_HTMLApplication.componentsXTagList == null) {
		org_tamina_html_component_HTMLApplication.componentsXTagList = new haxe_ds_StringMap();
	}
	return org_tamina_html_component_HTMLApplication.componentsXTagList;
};
org_tamina_html_component_HTMLApplication.createInstance = function(type) {
	var className = Type.getClassName(type);
	var tag = org_tamina_html_component_HTMLApplication.getTagByClassName(className);
	return window.document.createElement(tag);
};
org_tamina_html_component_HTMLApplication.isCustomElement = function(nodeName) {
	var this1 = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
	var key = nodeName.toLowerCase();
	var _this = this1;
	if(__map_reserved[key] != null) {
		return _this.existsReserved(key);
	} else {
		return _this.h.hasOwnProperty(key);
	}
};
org_tamina_html_component_HTMLApplication.getTagByClassName = function(className) {
	var result = "";
	var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
	while(tag.hasNext()) {
		var tag1 = tag.next();
		var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
		var value = __map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1];
		if(value == className) {
			result = tag1;
			break;
		}
	}
	return result;
};
org_tamina_html_component_HTMLApplication.prototype = {
	loadComponents: function() {
		var tag = org_tamina_html_component_HTMLApplication.get_componentsXTagList().keys();
		while(tag.hasNext()) {
			var tag1 = tag.next();
			var _this = org_tamina_html_component_HTMLApplication.get_componentsXTagList();
			var componentClass = Type.resolveClass(__map_reserved[tag1] != null ? _this.getReserved(tag1) : _this.h[tag1]);
			window.document.registerElement(tag1,componentClass);
		}
	}
	,__class__: org_tamina_html_component_HTMLApplication
};
var Main = $hx_exports["Main"] = function() {
	org_tamina_html_component_HTMLApplication.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.init = function(translations) {
	org_tamina_i18n_LocalizationManager.get_instance().setTranslations(translations);
	Main._instance.loadComponents();
};
Main.main = function() {
	Main._instance = new Main();
	Main._instance.build();
};
Main.__super__ = org_tamina_html_component_HTMLApplication;
Main.prototype = $extend(org_tamina_html_component_HTMLApplication.prototype,{
	build: function() {
		var request = new GetAlbumsRequest();
		request.setHeaders(new GetAlbumsRequestHeader("fr_FR","lalala F7CF4DD5-ECBF-4CD6-9E7D-29C513C17401"));
		request.send().then(function(response) {
			haxe_Log.trace(response.ResponseHeader,{ fileName : "Main.hx", lineNumber : 86, className : "Main", methodName : "build"});
		})["catch"](function(error) {
			haxe_Log.trace("ddddd",{ fileName : "Main.hx", lineNumber : 86, className : "Main", methodName : "build"});
		});
	}
	,myComponent_creationCompleteHandler: function(evt) {
		haxe_Log.trace("hophophop",{ fileName : "Main.hx", lineNumber : 90, className : "Main", methodName : "myComponent_creationCompleteHandler"});
	}
	,__class__: Main
});
var org_tamina_net_BaseRequest = function(remoteMethod,method,contentType) {
	if(contentType == null) {
		contentType = "application/json";
	}
	if(method == null) {
		method = "POST";
	}
	this._id = org_tamina_utils_UID.getUID();
	this._contentType = contentType;
	this._httpRequest = new XMLHttpRequest();
	this._httpRequest.upload.addEventListener("progress",$bind(this,this.uploadHandler));
	this._httpRequest.addEventListener("error",$bind(this,this.errorHandler));
	this._httpRequest.addEventListener("progress",$bind(this,this.progressHandler));
	this._httpRequest.open(method,remoteMethod,true);
	this._httpRequest.setRequestHeader("Content-Type",this._contentType + "; charset=utf-8");
};
$hxClasses["org.tamina.net.BaseRequest"] = org_tamina_net_BaseRequest;
org_tamina_net_BaseRequest.__name__ = ["org","tamina","net","BaseRequest"];
org_tamina_net_BaseRequest.prototype = {
	setHeaders: function(header) {
		this._header = header;
	}
	,get_id: function() {
		return this._id;
	}
	,send: function() {
		var _gthis = this;
		return new Promise(function(resolve,reject) {
			_gthis._httpRequest.addEventListener("load",function(result) {
				var req = result.target;
				try {
					var p = JSON.parse(req.response);
					resolve(p);
				} catch( e ) {
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					org_tamina_log_QuickLogger.error(e);
					reject(new Error("lalalal"));
				}
			});
			_gthis._httpRequest.send(JSON.stringify(_gthis.getRequestContent()));
		});
	}
	,abort: function() {
		this._httpRequest.abort();
	}
	,uploadHandler: function(progress) {
		org_tamina_log_QuickLogger.info("uploading " + progress.loaded + "/" + progress.total);
	}
	,getRequestContent: function() {
		return this._header;
	}
	,progressHandler: function(progress) {
		org_tamina_log_QuickLogger.info("downloading " + progress.loaded + "/" + progress.total);
	}
	,errorHandler: function(error) {
		org_tamina_log_QuickLogger.error(error);
	}
	,__class__: org_tamina_net_BaseRequest
};
var GetAlbumsRequest = function() {
	org_tamina_net_BaseRequest.call(this,"http://api.heidi.tech/Api.svc/GetAlbums","POST","application/json");
};
$hxClasses["GetAlbumsRequest"] = GetAlbumsRequest;
GetAlbumsRequest.__name__ = ["GetAlbumsRequest"];
GetAlbumsRequest.__super__ = org_tamina_net_BaseRequest;
GetAlbumsRequest.prototype = $extend(org_tamina_net_BaseRequest.prototype,{
	__class__: GetAlbumsRequest
});
var GetAlbumsRequestHeader = function(locale,token) {
	this.Locale = locale;
	this.Token = token;
};
$hxClasses["GetAlbumsRequestHeader"] = GetAlbumsRequestHeader;
GetAlbumsRequestHeader.__name__ = ["GetAlbumsRequestHeader"];
GetAlbumsRequestHeader.prototype = {
	__class__: GetAlbumsRequestHeader
};
var GetAlbumsRequestResponse = function() { };
$hxClasses["GetAlbumsRequestResponse"] = GetAlbumsRequestResponse;
GetAlbumsRequestResponse.__name__ = ["GetAlbumsRequestResponse"];
GetAlbumsRequestResponse.prototype = {
	__class__: GetAlbumsRequestResponse
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var haxe_StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var mconsole_PrinterBase = function() {
	this.printPosition = true;
	this.printLineNumbers = true;
};
$hxClasses["mconsole.PrinterBase"] = mconsole_PrinterBase;
mconsole_PrinterBase.__name__ = ["mconsole","PrinterBase"];
mconsole_PrinterBase.prototype = {
	print: function(level,params,indent,pos) {
		params = params.slice();
		var _g1 = 0;
		var _g = params.length;
		while(_g1 < _g) {
			var i = _g1++;
			params[i] = Std.string(params[i]);
		}
		var message = params.join(", ");
		var nextPosition = "@ " + pos.className + "." + pos.methodName;
		var nextLineNumber = pos.lineNumber == null ? "null" : "" + pos.lineNumber;
		var lineColumn = "";
		var emptyLineColumn = "";
		if(this.printPosition) {
			if(nextPosition != this.position) {
				this.printLine(mconsole_ConsoleColor.none,nextPosition,pos);
			}
		}
		if(this.printLineNumbers) {
			emptyLineColumn = StringTools.lpad(""," ",5);
			if(nextPosition != this.position || nextLineNumber != this.lineNumber) {
				lineColumn = StringTools.lpad(nextLineNumber," ",4) + " ";
			} else {
				lineColumn = emptyLineColumn;
			}
		}
		this.position = nextPosition;
		this.lineNumber = nextLineNumber;
		var color;
		switch(level[1]) {
		case 0:
			color = mconsole_ConsoleColor.white;
			break;
		case 1:
			color = mconsole_ConsoleColor.blue;
			break;
		case 2:
			color = mconsole_ConsoleColor.green;
			break;
		case 3:
			color = mconsole_ConsoleColor.yellow;
			break;
		case 4:
			color = mconsole_ConsoleColor.red;
			break;
		}
		var indent1 = StringTools.lpad(""," ",indent * 2);
		message = lineColumn + indent1 + message;
		message = message.split("\n").join("\n" + emptyLineColumn + indent1);
		this.printLine(color,message,pos);
	}
	,printLine: function(color,line,pos) {
		throw new js__$Boot_HaxeError("method not implemented in ConsolePrinterBase");
	}
	,__class__: mconsole_PrinterBase
};
var mconsole_Printer = function() { };
$hxClasses["mconsole.Printer"] = mconsole_Printer;
mconsole_Printer.__name__ = ["mconsole","Printer"];
mconsole_Printer.prototype = {
	__class__: mconsole_Printer
};
var mconsole_ConsoleView = function() {
	mconsole_PrinterBase.call(this);
	this.atBottom = true;
	this.projectHome = "/git/taminahx/";
	var document = window.document;
	this.element = document.createElement("pre");
	this.element.id = "console";
	var style = document.createElement("style");
	this.element.appendChild(style);
	var rules = document.createTextNode("#console {\r\n\tfont-family:monospace;\r\n\tbackground-color:#002B36;\r\n\tbackground-color:rgba(0%,16.9%,21.2%,0.95);\r\n\tpadding:8px;\r\n\theight:600px;\r\n\tmax-height:600px;\r\n\toverflow-y:scroll;\r\n\tposition:absolute;\r\n\tleft:0px;\r\n\ttop:0px;\r\n\tright:0px;\r\n\tmargin:0px;\r\n\tz-index:10000;\r\n}\r\n#console a { text-decoration:none; }\r\n#console a:hover div { background-color:#063642 }\r\n#console a div span { display:none; float:right; color:white; }\r\n#console a:hover div span { display:block; }");
	style.type = "text/css";
	if(style.styleSheet) {
		style.styleSheet.cssText = rules.nodeValue;
	} else {
		style.appendChild(rules);
	}
	var me = this;
	this.element.onscroll = function(e) {
		me.updateScroll();
	};
};
$hxClasses["mconsole.ConsoleView"] = mconsole_ConsoleView;
mconsole_ConsoleView.__name__ = ["mconsole","ConsoleView"];
mconsole_ConsoleView.__interfaces__ = [mconsole_Printer];
mconsole_ConsoleView.__super__ = mconsole_PrinterBase;
mconsole_ConsoleView.prototype = $extend(mconsole_PrinterBase.prototype,{
	updateScroll: function() {
		this.atBottom = this.element.scrollTop - (this.element.scrollHeight - this.element.clientHeight) == 0;
	}
	,printLine: function(color,line,pos) {
		var style;
		switch(color[1]) {
		case 0:
			style = "#839496";
			break;
		case 1:
			style = "#ffffff";
			break;
		case 2:
			style = "#248bd2";
			break;
		case 3:
			style = "#859900";
			break;
		case 4:
			style = "#b58900";
			break;
		case 5:
			style = "#dc322f";
			break;
		}
		var file = pos.fileName + ":" + pos.lineNumber;
		var fileName = pos.className.split(".").join("/") + ".hx";
		var link = "";
		this.element.innerHTML = this.element.innerHTML + "<a" + link + "><div style='color:" + style + "'>" + line + "<span>" + file + "</span></div></a>";
		if(this.atBottom) {
			this.element.scrollTop = this.element.scrollHeight;
		}
	}
	,attach: function() {
		window.document.body.appendChild(this.element);
	}
	,remove: function() {
		window.document.body.removeChild(this.element);
	}
	,__class__: mconsole_ConsoleView
});
var mconsole_Console = function() { };
$hxClasses["mconsole.Console"] = mconsole_Console;
mconsole_Console.__name__ = ["mconsole","Console"];
mconsole_Console.start = function() {
	if(mconsole_Console.running) {
		return;
	}
	mconsole_Console.running = true;
	mconsole_Console.previousTrace = haxe_Log.trace;
	haxe_Log.trace = mconsole_Console.haxeTrace;
	var tmp = mconsole_Console.hasConsole;
};
mconsole_Console.stop = function() {
	if(!mconsole_Console.running) {
		return;
	}
	mconsole_Console.running = false;
	haxe_Log.trace = mconsole_Console.previousTrace;
	mconsole_Console.previousTrace = null;
};
mconsole_Console.addPrinter = function(printer) {
	mconsole_Console.removePrinter(printer);
	mconsole_Console.printers.push(printer);
};
mconsole_Console.removePrinter = function(printer) {
	HxOverrides.remove(mconsole_Console.printers,printer);
};
mconsole_Console.haxeTrace = function(value,pos) {
	var params = pos.customParams;
	if(params == null) {
		params = [];
	} else {
		pos.customParams = null;
	}
	var level;
	switch(value) {
	case "debug":
		level = mconsole_LogLevel.debug;
		break;
	case "error":
		level = mconsole_LogLevel.error;
		break;
	case "info":
		level = mconsole_LogLevel.info;
		break;
	case "log":
		level = mconsole_LogLevel.log;
		break;
	case "warn":
		level = mconsole_LogLevel.warn;
		break;
	default:
		params.unshift(value);
		level = mconsole_LogLevel.log;
	}
	if(mconsole_Console.hasConsole) {
		var method = Std.string(level);
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.print = function(level,params,pos) {
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.log = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "log";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.log;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.info = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "info";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.info;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.debug = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "debug";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.debug;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.warn = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "warn";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.warn;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.error = function(message,stack,pos) {
	if(stack == null) {
		stack = haxe_CallStack.callStack();
	}
	var stackTrace = stack.length > 0 ? "\n" + mconsole_StackHelper.toString(stack) : "";
	if(mconsole_Console.hasConsole) {
		var method = "error";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.error;
	var params1 = ["Error: " + Std.string(message) + stackTrace];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.trace = function(pos) {
	if(mconsole_Console.hasConsole) {
		var method = "trace";
		var params = [];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var stack = mconsole_StackHelper.toString(haxe_CallStack.callStack());
	var level = mconsole_LogLevel.error;
	var params1 = ["Stack trace:\n" + stack];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.assert = function(expression,message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "assert";
		var params = [expression,message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	if(!expression) {
		var stack = mconsole_StackHelper.toString(haxe_CallStack.callStack());
		var level = mconsole_LogLevel.error;
		var params1 = ["Assertion failed: " + Std.string(message) + "\n" + stack];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
		throw js__$Boot_HaxeError.wrap(message);
	}
};
mconsole_Console.count = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "count";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var position = pos.fileName + ":" + pos.lineNumber;
	var count;
	var _this = mconsole_Console.counts;
	if(__map_reserved[position] != null ? _this.existsReserved(position) : _this.h.hasOwnProperty(position)) {
		var _this1 = mconsole_Console.counts;
		count = (__map_reserved[position] != null ? _this1.getReserved(position) : _this1.h[position]) + 1;
	} else {
		count = 1;
	}
	var _this2 = mconsole_Console.counts;
	if(__map_reserved[position] != null) {
		_this2.setReserved(position,count);
	} else {
		_this2.h[position] = count;
	}
	var level = mconsole_LogLevel.log;
	var params1 = [title + ": " + count];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
};
mconsole_Console.group = function(message,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "group";
		var params = [message];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var level = mconsole_LogLevel.log;
	var params1 = [message];
	var _g = 0;
	var _g1 = mconsole_Console.printers;
	while(_g < _g1.length) {
		var printer = _g1[_g];
		++_g;
		printer.print(level,params1,mconsole_Console.groupDepth,pos);
	}
	mconsole_Console.groupDepth += 1;
};
mconsole_Console.groupEnd = function(pos) {
	if(mconsole_Console.hasConsole) {
		var method = "groupEnd";
		var params = [];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	if(mconsole_Console.groupDepth > 0) {
		mconsole_Console.groupDepth -= 1;
	}
};
mconsole_Console.time = function(name,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "time";
		var params = [name];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _this = mconsole_Console.times;
	var value = new Date().getTime() / 1000;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,value);
	} else {
		_this.h[name] = value;
	}
};
mconsole_Console.timeEnd = function(name,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "timeEnd";
		var params = [name];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
	var _this = mconsole_Console.times;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var level = mconsole_LogLevel.log;
		var x = new Date().getTime() / 1000;
		var _this1 = mconsole_Console.times;
		var params1 = [name + ": " + ((x - (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])) * 1000 | 0) + "ms"];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
		mconsole_Console.times.remove(name);
	}
};
mconsole_Console.markTimeline = function(label,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "markTimeline";
		var params = [label];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.profile = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "profile";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.profileEnd = function(title,pos) {
	if(mconsole_Console.hasConsole) {
		var method = "profileEnd";
		var params = [title];
		if(console[method] != null) {
			if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
				method = mconsole_Console.dirxml;
			}
			if(console[method].apply != null) {
				var $console = console[method];
				var tmp = mconsole_Console.toConsoleValues(params);
				$console.apply(console,tmp);
			} else if(Function.prototype.bind != null) {
				var tmp1 = Function.prototype.bind.call(console[method],console);
				var tmp2 = mconsole_Console.toConsoleValues(params);
				tmp1.apply(console,tmp2);
			}
		}
	}
};
mconsole_Console.enterDebugger = function() {
	debugger;
};
mconsole_Console.detectConsole = function() {
	if(console != null && console[mconsole_Console.dirxml] == null) {
		mconsole_Console.dirxml = "log";
	}
	return console != undefined && console.log != undefined && console.warn != undefined;
};
mconsole_Console.callConsole = function(method,params) {
	if(console[method] != null) {
		if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
			method = mconsole_Console.dirxml;
		}
		if(console[method].apply != null) {
			var $console = console[method];
			var tmp = mconsole_Console.toConsoleValues(params);
			$console.apply(console,tmp);
		} else if(Function.prototype.bind != null) {
			var tmp1 = Function.prototype.bind.call(console[method],console);
			var tmp2 = mconsole_Console.toConsoleValues(params);
			tmp1.apply(console,tmp2);
		}
	}
};
mconsole_Console.toConsoleValues = function(params) {
	var _g1 = 0;
	var _g = params.length;
	while(_g1 < _g) {
		var i = _g1++;
		params[i] = mconsole_Console.toConsoleValue(params[i]);
	}
	return params;
};
mconsole_Console.toConsoleValue = function(value) {
	var o = value;
	var typeClass = o == null ? null : js_Boot.getClass(o);
	var typeName = typeClass == null ? "" : Type.getClassName(typeClass);
	if(typeName == "Xml") {
		var parser = new DOMParser();
		var tmp = value.toString();
		return parser.parseFromString(tmp,"text/xml").firstChild;
	} else if(typeName == "Map" || typeName == "StringMap" || typeName == "IntMap") {
		var $native = { };
		var map = value;
		var key = map.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			$native[Std.string(key1)] = mconsole_Console.toConsoleValue(map.get(key1));
		}
		return $native;
	} else {
		var _g = Type["typeof"](value);
		if(_g[1] == 7) {
			var e = _g[2];
			var native1 = [];
			var name = Type.getEnumName(e) + "." + value[0];
			var params = value.slice(2);
			if(params.length > 0) {
				native1.push(name + "(");
				var _g1 = 0;
				var _g2 = params.length;
				while(_g1 < _g2) {
					var i = _g1++;
					native1.push(mconsole_Console.toConsoleValue(params[i]));
				}
				native1.push(")");
			} else {
				return [name];
			}
			return native1;
		}
		if(typeName == "Array" || typeName == "List" || typeName == "haxe.FastList") {
			var native2 = [];
			var iterable = value;
			var i1 = $iterator(iterable)();
			while(i1.hasNext()) {
				var i2 = i1.next();
				native2.push(mconsole_Console.toConsoleValue(i2));
			}
			return native2;
		}
	}
	return value;
};
var mconsole_ConsoleMacro = function() { };
$hxClasses["mconsole.ConsoleMacro"] = mconsole_ConsoleMacro;
mconsole_ConsoleMacro.__name__ = ["mconsole","ConsoleMacro"];
var mconsole_LogLevel = { __ename__ : ["mconsole","LogLevel"], __constructs__ : ["log","info","debug","warn","error"] };
mconsole_LogLevel.log = ["log",0];
mconsole_LogLevel.log.toString = $estr;
mconsole_LogLevel.log.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.info = ["info",1];
mconsole_LogLevel.info.toString = $estr;
mconsole_LogLevel.info.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.debug = ["debug",2];
mconsole_LogLevel.debug.toString = $estr;
mconsole_LogLevel.debug.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.warn = ["warn",3];
mconsole_LogLevel.warn.toString = $estr;
mconsole_LogLevel.warn.__enum__ = mconsole_LogLevel;
mconsole_LogLevel.error = ["error",4];
mconsole_LogLevel.error.toString = $estr;
mconsole_LogLevel.error.__enum__ = mconsole_LogLevel;
var mconsole_ConsoleColor = { __ename__ : ["mconsole","ConsoleColor"], __constructs__ : ["none","white","blue","green","yellow","red"] };
mconsole_ConsoleColor.none = ["none",0];
mconsole_ConsoleColor.none.toString = $estr;
mconsole_ConsoleColor.none.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.white = ["white",1];
mconsole_ConsoleColor.white.toString = $estr;
mconsole_ConsoleColor.white.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.blue = ["blue",2];
mconsole_ConsoleColor.blue.toString = $estr;
mconsole_ConsoleColor.blue.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.green = ["green",3];
mconsole_ConsoleColor.green.toString = $estr;
mconsole_ConsoleColor.green.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.yellow = ["yellow",4];
mconsole_ConsoleColor.yellow.toString = $estr;
mconsole_ConsoleColor.yellow.__enum__ = mconsole_ConsoleColor;
mconsole_ConsoleColor.red = ["red",5];
mconsole_ConsoleColor.red.toString = $estr;
mconsole_ConsoleColor.red.__enum__ = mconsole_ConsoleColor;
var mconsole_StackHelper = function() { };
$hxClasses["mconsole.StackHelper"] = mconsole_StackHelper;
mconsole_StackHelper.__name__ = ["mconsole","StackHelper"];
mconsole_StackHelper.createFilters = function() {
	var filters = new haxe_ds_StringMap();
	if(__map_reserved["@ mconsole.ConsoleRedirect.haxeTrace:59"] != null) {
		filters.setReserved("@ mconsole.ConsoleRedirect.haxeTrace:59",true);
	} else {
		filters.h["@ mconsole.ConsoleRedirect.haxeTrace:59"] = true;
	}
	return filters;
};
mconsole_StackHelper.toString = function(stack) {
	return "null";
};
var mconsole_StackItemHelper = function() { };
$hxClasses["mconsole.StackItemHelper"] = mconsole_StackItemHelper;
mconsole_StackItemHelper.__name__ = ["mconsole","StackItemHelper"];
mconsole_StackItemHelper.toString = function(item,isFirst) {
	if(isFirst == null) {
		isFirst = false;
	}
	switch(item[1]) {
	case 0:
		return "(anonymous function)";
	case 1:
		var module = item[2];
		return module;
	case 2:
		var line = item[4];
		var file = item[3];
		var s = item[2];
		return (s == null ? file.split("::").join(".") + ":" + line : mconsole_StackItemHelper.toString(s)) + ":" + line;
	case 3:
		var method = item[3];
		var className = item[2];
		return className + "." + method;
	case 4:
		var v = item[2];
		return "LocalFunction(" + v + ")";
	}
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = ["msignal","Signal"];
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = ["msignal","Signal0"];
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = ["msignal","Signal1"];
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = ["msignal","Signal2"];
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = ["msignal","Slot"];
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = ["msignal","Slot0"];
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = ["msignal","Slot1"];
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = ["msignal","Slot2"];
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = ["msignal","SlotList"];
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
};
var org_tamina_display_BitmapData = function() { };
$hxClasses["org.tamina.display.BitmapData"] = org_tamina_display_BitmapData;
org_tamina_display_BitmapData.__name__ = ["org","tamina","display","BitmapData"];
org_tamina_display_BitmapData.toDataUrl = function(source,width,height,type) {
	var result = "";
	var tempCanvas = window.document.createElement("canvas");
	tempCanvas.width = width;
	tempCanvas.height = height;
	var tempContext = tempCanvas.getContext("2d",null);
	tempContext.drawImage(source,0,0,source.width,source.height,0,0,width,height);
	result = tempCanvas.toDataURL(type);
	tempContext = null;
	try {
		tempCanvas.remove();
	} catch( e ) {
		tempCanvas = null;
	}
	return result;
};
org_tamina_display_BitmapData.imageToCanvas = function(source,width,height) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	var result = window.document.createElement("canvas");
	if(width == -1) {
		width = source.naturalWidth;
		height = source.naturalHeight;
	}
	result.width = width;
	result.height = height;
	var context = result.getContext("2d",null);
	context.drawImage(source,0,0,source.naturalWidth,source.naturalHeight,0,0,width,height);
	context = null;
	return result;
};
org_tamina_display_BitmapData.copyCanvas = function(source,width,height) {
	var result = window.document.createElement("canvas");
	result.width = width;
	result.height = height;
	var context = result.getContext("2d",null);
	context.drawImage(source,0,0,source.width,source.height,0,0,width,height);
	context = null;
	return result;
};
org_tamina_display_BitmapData.getMimeType = function(base64) {
	return base64.substring(base64.indexOf(":") + 1,base64.indexOf(";"));
};
org_tamina_display_BitmapData.getMimeTypeFromURL = function(url) {
	var result = "";
	var _g = url.get_extension().toLowerCase();
	switch(_g) {
	case "bmp":
		result = "image/bmp";
		break;
	case "gif":
		result = "image/gif";
		break;
	case "jpeg":
		result = "image/jpeg";
		break;
	case "jpg":
		result = "image/jpeg";
		break;
	case "png":
		result = "image/png";
		break;
	case "tiff":
		result = "image/tiff";
		break;
	case "webp":
		result = "image/webp";
		break;
	}
	return result;
};
var org_tamina_display_ColorMatrix = function() { };
$hxClasses["org.tamina.display.ColorMatrix"] = org_tamina_display_ColorMatrix;
org_tamina_display_ColorMatrix.__name__ = ["org","tamina","display","ColorMatrix"];
org_tamina_display_ColorMatrix.get_BANDW_MATRIX = function() {
	return [0.2225,0.7169,0.0606,0,0,0.2225,0.7169,0.0606,0,0,0.2225,0.7169,0.0606,0,0,0,0,0,1,0];
};
org_tamina_display_ColorMatrix.get_NEGATIVE_MATRIX = function() {
	return [-1,0,0,0,255,0,-1,0,0,255,0,0,-1,0,255,0,0,0,1,0];
};
org_tamina_display_ColorMatrix.get_SEPIA_MATRIX = function() {
	return [0.3930000066757202,0.7689999938011169,0.1889999955892563,0,0,0.3490000069141388,0.6859999895095825,0.1679999977350235,0,0,0.2720000147819519,0.5339999794960022,0.1309999972581863,0,0,0,0,0,1,0,0,0,0,0,1];
};
var org_tamina_events_Event = function(type,data) {
	this.type = type;
	this.data = data;
};
$hxClasses["org.tamina.events.Event"] = org_tamina_events_Event;
org_tamina_events_Event.__name__ = ["org","tamina","events","Event"];
org_tamina_events_Event.prototype = {
	__class__: org_tamina_events_Event
};
var org_tamina_events_EventDispatcher = function() {
	this._eventsCallback = new haxe_ds_StringMap();
};
$hxClasses["org.tamina.events.EventDispatcher"] = org_tamina_events_EventDispatcher;
org_tamina_events_EventDispatcher.__name__ = ["org","tamina","events","EventDispatcher"];
org_tamina_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener) {
		var _this = this._eventsCallback;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var _this1 = this._eventsCallback;
			var value = [];
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,value);
			} else {
				_this1.h[type] = value;
			}
		}
		var _this2 = this._eventsCallback;
		(__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]).push(listener);
	}
	,removeEventListener: function(type,listener) {
		var _this = this._eventsCallback;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _this1 = this._eventsCallback;
			var events = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
			HxOverrides.remove(events,listener);
		}
	}
	,removeAllEventListeners: function(type) {
		var _this = this._eventsCallback;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			this._eventsCallback.remove(type);
		}
	}
	,dispatchEvent: function(event) {
		var _this = this._eventsCallback;
		var key = event.type;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this._eventsCallback;
			var key1 = event.type;
			var events = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).slice(0);
			var _g1 = 0;
			var _g = events.length;
			while(_g1 < _g) {
				var i = _g1++;
				var _this2 = this._eventsCallback;
				var key2 = event.type;
				if((__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]).indexOf(events[i]) > -1) {
					events[i](event);
				}
			}
		}
	}
	,__class__: org_tamina_events_EventDispatcher
};
var org_tamina_events_XMLHttpRequestEvent = function() { };
$hxClasses["org.tamina.events.XMLHttpRequestEvent"] = org_tamina_events_XMLHttpRequestEvent;
org_tamina_events_XMLHttpRequestEvent.__name__ = ["org","tamina","events","XMLHttpRequestEvent"];
var org_tamina_events_html_ImageEvent = function() { };
$hxClasses["org.tamina.events.html.ImageEvent"] = org_tamina_events_html_ImageEvent;
org_tamina_events_html_ImageEvent.__name__ = ["org","tamina","events","html","ImageEvent"];
var org_tamina_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["org.tamina.geom.Point"] = org_tamina_geom_Point;
org_tamina_geom_Point.__name__ = ["org","tamina","geom","Point"];
org_tamina_geom_Point.prototype = {
	__class__: org_tamina_geom_Point
};
var org_tamina_geom_Junction = function(x,y,id) {
	if(id == null) {
		id = "";
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	org_tamina_geom_Point.call(this,x,y);
	this.links = [];
	this.id = id;
};
$hxClasses["org.tamina.geom.Junction"] = org_tamina_geom_Junction;
org_tamina_geom_Junction.__name__ = ["org","tamina","geom","Junction"];
org_tamina_geom_Junction.__super__ = org_tamina_geom_Point;
org_tamina_geom_Junction.prototype = $extend(org_tamina_geom_Point.prototype,{
	__class__: org_tamina_geom_Junction
});
var org_tamina_html_component_HTMLComponent = function() {
	this._skinPartsAttached = false;
};
$hxClasses["org.tamina.html.component.HTMLComponent"] = org_tamina_html_component_HTMLComponent;
org_tamina_html_component_HTMLComponent.__name__ = ["org","tamina","html","component","HTMLComponent"];
org_tamina_html_component_HTMLComponent.__super__ = HTMLHtmlElement;
org_tamina_html_component_HTMLComponent.prototype = $extend(HTMLHtmlElement.prototype,{
	createdCallback: function() {
		this.initDefaultValues();
		this.parseContent();
		this.initContent();
		this.displayContent();
		this.updateSkinPartsStatus();
		this.created = true;
		if(this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,creationCompleteCallback: function() {
		this.creationComplete = true;
		this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("creationComplete",false));
	}
	,attachedCallback: function() {
		if(!this.initialized) {
			this.dispatchEvent(org_tamina_html_component_HTMLComponentEventFactory.createEvent("initialize",false));
		}
		this.initialized = true;
	}
	,detachedCallback: function() {
	}
	,attributeChangedCallback: function(attrName,oldVal,newVal) {
	}
	,initDefaultValues: function() {
		this._visible = true;
		this._useExternalContent = false;
		this._defaultDisplayStyle = "";
	}
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		this._visible = value;
		if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none" || this._defaultDisplayStyle == null) {
			this._defaultDisplayStyle = this.style.display;
			if(this._defaultDisplayStyle == "" || this._defaultDisplayStyle == "none") {
				this._defaultDisplayStyle = "block";
			}
		}
		if(this._visible) {
			this.style.display = this._defaultDisplayStyle;
		} else {
			this.style.display = "none";
		}
		return this._visible;
	}
	,getContent: function() {
		return this.getView();
	}
	,parseContent: function(useExternalContent) {
		if(useExternalContent == null) {
			useExternalContent = true;
		}
		var content = "";
		if(this.childElementCount == 0 || !useExternalContent) {
			content = this.translateContent(this.getContent());
			this._tempElement = window.document.createElement("div");
		} else {
			this._useExternalContent = true;
			this._tempElement = this;
			content = this.translateContent(this.innerHTML);
		}
		this._tempElement.innerHTML = content;
		this.initSkinParts(this._tempElement);
	}
	,initSkinParts: function(target) {
		var c = js_Boot.getClass(this);
		this._skinParts = [];
		while(c != org_tamina_html_component_HTMLComponent && c != null) {
			var meta = haxe_rtti_Meta.getFields(c);
			var metaFields = Reflect.fields(meta);
			var _g1 = 0;
			var _g = metaFields.length;
			while(_g1 < _g) {
				var i = _g1++;
				var field = Reflect.field(meta,metaFields[i]);
				if(Object.prototype.hasOwnProperty.call(field,"skinpart")) {
					var element = org_tamina_utils_HTMLUtils.getElementByAttribute(target,"data-id",metaFields[i]);
					this[metaFields[i]] = element;
					if(element == null) {
						haxe_Log.trace("skinpart is null: " + metaFields[i] + " from " + this.nodeName,{ fileName : "HTMLComponent.hx", lineNumber : 240, className : "org.tamina.html.component.HTMLComponent", methodName : "initSkinParts"});
					}
					this._skinParts.push(element);
				}
			}
			c = Type.getSuperClass(c);
		}
	}
	,updateSkinPartsStatus: function() {
		this._skinPartsWaiting = [];
		var _g = 0;
		var _g1 = this._skinParts;
		while(_g < _g1.length) {
			var skinPart = _g1[_g];
			++_g;
			if(org_tamina_html_component_HTMLApplication.isCustomElement(skinPart.nodeName) && skinPart.initialized != true) {
				this._skinPartsWaiting.push(skinPart);
			}
		}
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this._skinPartsAttached) {
			var _g2 = 0;
			var _g11 = this._skinPartsWaiting;
			while(_g2 < _g11.length) {
				var skinPart1 = _g11[_g2];
				++_g2;
				skinPart1.addEventListener("initialize",(function(a1,f) {
					return function() {
						f[0](a1[0]);
					};
				})([skinPart1],[$bind(this,this.skinPartReadyHandler)]));
			}
		}
	}
	,skinPartReadyHandler: function(skinPart) {
		HxOverrides.remove(this._skinPartsWaiting,skinPart);
		this._skinPartsAttached = this._skinPartsWaiting.length == 0;
		if(!this.creationComplete && this._skinPartsAttached) {
			this.creationCompleteCallback();
		}
	}
	,translateContent: function(source) {
		var content = source;
		var stringToTranslate = new RegExp("\\{\\{(?!\\}\\})(.+)\\}\\}","gim");
		var results = [];
		var result = [];
		var i = 0;
		while(true) {
			result = stringToTranslate.exec(content);
			if(!(result != null)) {
				break;
			}
			results[i] = result;
			++i;
		}
		result = [];
		var _g = 0;
		while(_g < results.length) {
			var result1 = results[_g];
			++_g;
			var totalString = result1[0];
			var key = StringTools.trim(result1[1]);
			content = StringTools.replace(content,totalString,org_tamina_i18n_LocalizationManager.get_instance().getString(key));
		}
		return content;
	}
	,initContent: function() {
	}
	,displayContent: function() {
		var numChildren = this._tempElement.children.length;
		if(!this._useExternalContent) {
			while(numChildren > 0) {
				--numChildren;
				var item = this._tempElement.children.item(0);
				this.appendChild(item);
			}
		}
	}
	,__class__: org_tamina_html_component_HTMLComponent
});
var org_tamina_html_component_HTMLComponentEventFactory = function() { };
$hxClasses["org.tamina.html.component.HTMLComponentEventFactory"] = org_tamina_html_component_HTMLComponentEventFactory;
org_tamina_html_component_HTMLComponentEventFactory.__name__ = ["org","tamina","html","component","HTMLComponentEventFactory"];
org_tamina_html_component_HTMLComponentEventFactory.createEvent = function(type,bubbles) {
	if(bubbles == null) {
		bubbles = true;
	}
	var result = window.document.createEvent("Event");
	result.initEvent(type,bubbles,true);
	return result;
};
var org_tamina_i18n_ITranslation = function() { };
$hxClasses["org.tamina.i18n.ITranslation"] = org_tamina_i18n_ITranslation;
org_tamina_i18n_ITranslation.__name__ = ["org","tamina","i18n","ITranslation"];
org_tamina_i18n_ITranslation.prototype = {
	__class__: org_tamina_i18n_ITranslation
};
var org_tamina_i18n_LocalizationManager = function() {
	this._translations = new haxe_ds_StringMap();
};
$hxClasses["org.tamina.i18n.LocalizationManager"] = org_tamina_i18n_LocalizationManager;
org_tamina_i18n_LocalizationManager.__name__ = ["org","tamina","i18n","LocalizationManager"];
org_tamina_i18n_LocalizationManager.add = function(manager) {
	org_tamina_i18n_LocalizationManager._instance = manager;
};
org_tamina_i18n_LocalizationManager.get_instance = function() {
	if(org_tamina_i18n_LocalizationManager._instance == null) {
		org_tamina_i18n_LocalizationManager._instance = new org_tamina_i18n_LocalizationManager();
	}
	return org_tamina_i18n_LocalizationManager._instance;
};
org_tamina_i18n_LocalizationManager.prototype = {
	setTranslations: function(translations) {
		var _g = 0;
		while(_g < translations.length) {
			var translation = translations[_g];
			++_g;
			var _this = this._translations;
			var key = translation.fieldName;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,translation);
			} else {
				_this.h[key] = translation;
			}
		}
	}
	,getString: function(key) {
		var result = "";
		var _this = this._translations;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this._translations;
			result = (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).value;
		}
		return result;
	}
	,__class__: org_tamina_i18n_LocalizationManager
};
var org_tamina_io_ImageLoader = function(toDataURL) {
	if(toDataURL == null) {
		toDataURL = true;
	}
	this._image = new Image();
	this._image.crossOrigin = "anonymous";
	this.complete = new msignal_Signal1();
	this.error = new msignal_Signal0();
};
$hxClasses["org.tamina.io.ImageLoader"] = org_tamina_io_ImageLoader;
org_tamina_io_ImageLoader.__name__ = ["org","tamina","io","ImageLoader"];
org_tamina_io_ImageLoader.prototype = {
	get_image: function() {
		return this._image;
	}
	,get_dataURL: function() {
		var result = "";
		if(this._image != null) {
			result = this._image.src;
		}
		return result;
	}
	,load: function(url) {
		this._image.addEventListener("load",$bind(this,this.imageLoadHandler),false);
		this._image.addEventListener("error",$bind(this,this.imageLoadErrorHandler),false);
		this._image.src = url.path;
	}
	,imageLoadErrorHandler: function(event) {
		this._image.removeEventListener("load",$bind(this,this.imageLoadHandler));
		this._image.removeEventListener("error",$bind(this,this.imageLoadErrorHandler));
		this.error.dispatch();
	}
	,imageLoadHandler: function(event) {
		this._image.removeEventListener("load",$bind(this,this.imageLoadHandler));
		this._image.removeEventListener("error",$bind(this,this.imageLoadErrorHandler));
		if(this._toDataURL) {
			var canvas = window.document.createElement("canvas");
			canvas.width = this._image.width;
			canvas.height = this._image.height;
			var ctx = canvas.getContext("2d",null);
			ctx.drawImage(this._image,0,0,this._image.width,this._image.height);
			var outputImage = new Image();
			outputImage.src = canvas.toDataURL();
			this.complete.dispatch(outputImage);
		} else {
			this.complete.dispatch(this._image);
		}
	}
	,__class__: org_tamina_io_ImageLoader
};
var org_tamina_log__$LogLevel_LogLevel_$Impl_$ = {};
$hxClasses["org.tamina.log._LogLevel.LogLevel_Impl_"] = org_tamina_log__$LogLevel_LogLevel_$Impl_$;
org_tamina_log__$LogLevel_LogLevel_$Impl_$.__name__ = ["org","tamina","log","_LogLevel","LogLevel_Impl_"];
org_tamina_log__$LogLevel_LogLevel_$Impl_$.compareMinusOrEqual = function(this1,target) {
	return this1 <= target;
};
var org_tamina_log_QuickLogger = function() { };
$hxClasses["org.tamina.log.QuickLogger"] = org_tamina_log_QuickLogger;
org_tamina_log_QuickLogger.__name__ = ["org","tamina","log","QuickLogger"];
org_tamina_log_QuickLogger.info = function(message,source) {
	if(org_tamina_log__$LogLevel_LogLevel_$Impl_$.compareMinusOrEqual(org_tamina_log_QuickLogger.level,0)) {
		var message1 = HxOverrides.dateStr(new Date()) + " [ INFO ] " + message;
		var pos = { fileName : "QuickLogger.hx", lineNumber : 15, className : "org.tamina.log.QuickLogger", methodName : "info"};
		if(mconsole_Console.hasConsole) {
			var method = "info";
			var params = [message1];
			if(console[method] != null) {
				if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
					method = mconsole_Console.dirxml;
				}
				if(console[method].apply != null) {
					var $console = console[method];
					var tmp = mconsole_Console.toConsoleValues(params);
					$console.apply(console,tmp);
				} else if(Function.prototype.bind != null) {
					var tmp1 = Function.prototype.bind.call(console[method],console);
					var tmp2 = mconsole_Console.toConsoleValues(params);
					tmp1.apply(console,tmp2);
				}
			}
		}
		var level = mconsole_LogLevel.info;
		var params1 = [message1];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
	}
};
org_tamina_log_QuickLogger.debug = function(message,source) {
	if(org_tamina_log__$LogLevel_LogLevel_$Impl_$.compareMinusOrEqual(org_tamina_log_QuickLogger.level,1)) {
		var message1 = HxOverrides.dateStr(new Date()) + " [ DEBUG ] " + message;
		var pos = { fileName : "QuickLogger.hx", lineNumber : 21, className : "org.tamina.log.QuickLogger", methodName : "debug"};
		if(mconsole_Console.hasConsole) {
			var method = "debug";
			var params = [message1];
			if(console[method] != null) {
				if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
					method = mconsole_Console.dirxml;
				}
				if(console[method].apply != null) {
					var $console = console[method];
					var tmp = mconsole_Console.toConsoleValues(params);
					$console.apply(console,tmp);
				} else if(Function.prototype.bind != null) {
					var tmp1 = Function.prototype.bind.call(console[method],console);
					var tmp2 = mconsole_Console.toConsoleValues(params);
					tmp1.apply(console,tmp2);
				}
			}
		}
		var level = mconsole_LogLevel.debug;
		var params1 = [message1];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
	}
};
org_tamina_log_QuickLogger.warn = function(message,source) {
	if(org_tamina_log__$LogLevel_LogLevel_$Impl_$.compareMinusOrEqual(org_tamina_log_QuickLogger.level,2)) {
		var message1 = HxOverrides.dateStr(new Date()) + " [ WARN ] " + message;
		var pos = { fileName : "QuickLogger.hx", lineNumber : 27, className : "org.tamina.log.QuickLogger", methodName : "warn"};
		if(mconsole_Console.hasConsole) {
			var method = "warn";
			var params = [message1];
			if(console[method] != null) {
				if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
					method = mconsole_Console.dirxml;
				}
				if(console[method].apply != null) {
					var $console = console[method];
					var tmp = mconsole_Console.toConsoleValues(params);
					$console.apply(console,tmp);
				} else if(Function.prototype.bind != null) {
					var tmp1 = Function.prototype.bind.call(console[method],console);
					var tmp2 = mconsole_Console.toConsoleValues(params);
					tmp1.apply(console,tmp2);
				}
			}
		}
		var level = mconsole_LogLevel.warn;
		var params1 = [message1];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
	}
};
org_tamina_log_QuickLogger.error = function(message,source) {
	if(org_tamina_log__$LogLevel_LogLevel_$Impl_$.compareMinusOrEqual(org_tamina_log_QuickLogger.level,3)) {
		var message1 = HxOverrides.dateStr(new Date()) + " [ ERROR ] " + message;
		var stack = null;
		var pos = { fileName : "QuickLogger.hx", lineNumber : 33, className : "org.tamina.log.QuickLogger", methodName : "error"};
		if(stack == null) {
			stack = haxe_CallStack.callStack();
		}
		var stackTrace = stack.length > 0 ? "\n" + mconsole_StackHelper.toString(stack) : "";
		if(mconsole_Console.hasConsole) {
			var method = "error";
			var params = [message1];
			if(console[method] != null) {
				if(method == "log" && js_Boot.__instanceof(params[0],Xml)) {
					method = mconsole_Console.dirxml;
				}
				if(console[method].apply != null) {
					var $console = console[method];
					var tmp = mconsole_Console.toConsoleValues(params);
					$console.apply(console,tmp);
				} else if(Function.prototype.bind != null) {
					var tmp1 = Function.prototype.bind.call(console[method],console);
					var tmp2 = mconsole_Console.toConsoleValues(params);
					tmp1.apply(console,tmp2);
				}
			}
		}
		var level = mconsole_LogLevel.error;
		var params1 = ["Error: " + Std.string(message1) + stackTrace];
		var _g = 0;
		var _g1 = mconsole_Console.printers;
		while(_g < _g1.length) {
			var printer = _g1[_g];
			++_g;
			printer.print(level,params1,mconsole_Console.groupDepth,pos);
		}
	}
};
org_tamina_log_QuickLogger.profile = function(start) {
	if(start == null) {
		start = false;
	}
	if(org_tamina_log_QuickLogger._startProfilingDate != null && !start) {
		org_tamina_log_QuickLogger.debug("profling result : " + (new Date().getTime() - org_tamina_log_QuickLogger._startProfilingDate.getTime()) + " ms");
	}
	org_tamina_log_QuickLogger._startProfilingDate = new Date();
};
var org_tamina_net_AssetLoader = function() {
	this.completeSignal = new msignal_Signal0();
	this.errorSignal = new msignal_Signal0();
	this._cache = new org_tamina_net_AssetLoaderCache();
};
$hxClasses["org.tamina.net.AssetLoader"] = org_tamina_net_AssetLoader;
org_tamina_net_AssetLoader.__name__ = ["org","tamina","net","AssetLoader"];
org_tamina_net_AssetLoader.prototype = {
	load: function(url) {
		this._url = url;
		this._asset = this._cache.getLoadingAsset(this._url);
		if(this._cache.isLoaded(this._url)) {
			org_tamina_log_QuickLogger.info("Asset déja chargé : " + this._url.get_documentName());
			this.loadCompleteHandler();
		} else if(this._asset != null) {
			org_tamina_log_QuickLogger.info("Asset en cours de chargement : " + this._url.get_documentName());
			this._asset.addEventListener("load",$bind(this,this.loadCompleteHandler));
			this._asset.addEventListener("error",$bind(this,this.loadErrorHandler));
		} else {
			this.addToHTML();
		}
	}
	,addToHTML: function() {
		org_tamina_log_QuickLogger.info("chargement de " + this._url.path);
		var tagName = "script";
		if(this._url.assetType == "css") {
			tagName = "link";
		}
		this._asset = window.document.createElement(tagName);
		this._asset.addEventListener("load",$bind(this,this.loadCompleteHandler));
		this._asset.addEventListener("error",$bind(this,this.loadErrorHandler));
		this._cache.addLoadingAsset(this._asset);
		var _g = this._url.assetType;
		switch(_g) {
		case "css":
			var link = this._asset;
			link.type = "text/css";
			link.rel = "stylesheet";
			link.href = this._url.path;
			break;
		case "js":
			var script = this._asset;
			script.type = "text/javascript";
			script.src = this._url.path;
			break;
		}
		this._header = window.document.getElementsByTagName("head")[0];
		this._header.appendChild(this._asset);
	}
	,loadCompleteHandler: function(event) {
		org_tamina_log_QuickLogger.info("asset loaded");
		this._cache.addLoadedAsset(this._url);
		this._cache.removeLoadingAsset(this._asset);
		this.completeSignal.dispatch();
	}
	,loadErrorHandler: function(event) {
		this._cache.removeLoadingAsset(this._asset);
		this.errorSignal.dispatch();
	}
	,__class__: org_tamina_net_AssetLoader
};
var org_tamina_net_AssetLoaderCache = function() {
	if(this.get__cache() == null) {
		this.set__cache(new org_tamina_net__$AssetLoaderCache_Cache());
	}
};
$hxClasses["org.tamina.net.AssetLoaderCache"] = org_tamina_net_AssetLoaderCache;
org_tamina_net_AssetLoaderCache.__name__ = ["org","tamina","net","AssetLoaderCache"];
org_tamina_net_AssetLoaderCache.prototype = {
	getLoadingAsset: function(url) {
		var result = null;
		var _g1 = 0;
		var _g = this.get__cache().assetsLoading.length;
		try {
			while(_g1 < _g) {
				var i = _g1++;
				var asset = this.get__cache().assetsLoading[i];
				var _g2 = url.assetType;
				switch(_g2) {
				case "css":
					var link = asset;
					if(link.href == url.path) {
						result = asset;
						throw "__break__";
					}
					break;
				case "js":
					var script = asset;
					if(script.src == url.path) {
						result = asset;
						throw "__break__";
					}
					break;
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return result;
	}
	,isLoaded: function(assetUrl) {
		return this.get__cache().assetsLoaded.indexOf(assetUrl.path) >= 0;
	}
	,addLoadedAsset: function(assetUrl) {
		this.get__cache().assetsLoaded.push(assetUrl.path);
	}
	,addLoadingAsset: function(asset) {
		this.get__cache().assetsLoading.push(asset);
	}
	,removeLoadingAsset: function(asset) {
		HxOverrides.remove(this.get__cache().assetsLoading,asset);
	}
	,set__cache: function(value) {
		window["assetLoaderCache"] = value;
		return null;
	}
	,get__cache: function() {
		return Reflect.field(window,"assetLoaderCache");
	}
	,__class__: org_tamina_net_AssetLoaderCache
};
var org_tamina_net__$AssetLoaderCache_Cache = function() {
	this.assetsLoaded = [];
	this.assetsLoading = [];
};
$hxClasses["org.tamina.net._AssetLoaderCache.Cache"] = org_tamina_net__$AssetLoaderCache_Cache;
org_tamina_net__$AssetLoaderCache_Cache.__name__ = ["org","tamina","net","_AssetLoaderCache","Cache"];
org_tamina_net__$AssetLoaderCache_Cache.prototype = {
	__class__: org_tamina_net__$AssetLoaderCache_Cache
};
var org_tamina_net_URL = function(path) {
	if(path == null) {
		path = "";
	}
	this.path = path;
	this._parameters = new haxe_ds_StringMap();
	if(path.lastIndexOf("?") > 0) {
		var params = path.substring(path.lastIndexOf("?") + 1);
		var elements = params.split("&");
		var _g1 = 0;
		var _g = elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			var element = elements[i].split("=");
			var _this = this._parameters;
			var key = element[0];
			var value = element[1];
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
};
$hxClasses["org.tamina.net.URL"] = org_tamina_net_URL;
org_tamina_net_URL.__name__ = ["org","tamina","net","URL"];
org_tamina_net_URL.prototype = {
	get_scheme: function() {
		var result = "";
		if(this.path.indexOf(":") > 0) {
			result = this.path.substring(0,this.path.indexOf(":"));
		}
		return result;
	}
	,get_parameters: function() {
		return this._parameters;
	}
	,get_extension: function() {
		var result = "";
		var pathWithoutParams = this.path;
		if(this.path.indexOf("?") > -1) {
			pathWithoutParams = this.path.substring(0,this.path.indexOf("?"));
		}
		var extensionSize = pathWithoutParams.length - pathWithoutParams.lastIndexOf(".") - 1;
		if(extensionSize >= 2 && extensionSize <= 4) {
			result = pathWithoutParams.substring(pathWithoutParams.length - extensionSize);
		}
		return result;
	}
	,get_documentName: function() {
		var result = "";
		if(this.path != null) {
			result = this.path.substring(this.path.lastIndexOf("/") + 1);
		}
		return result;
	}
	,toString: function() {
		return this.path;
	}
	,removeParameter: function(key) {
		var rtn = this.path;
		if(this.path.indexOf("?") != -1) {
			rtn = this.path.split("?")[0];
			var param;
			var params_arr = [];
			var queryString = this.path.indexOf("?") != -1 ? this.path.split("?")[1] : "";
			if(queryString != "") {
				params_arr = queryString.split("&");
				var i = params_arr.length - 1;
				while(i >= 0) {
					param = params_arr[i].split("=")[0];
					if(param == key) {
						params_arr.splice(i,1);
					}
					--i;
				}
				rtn = rtn + "?" + params_arr.join("&");
			}
		}
		this.path = rtn;
	}
	,__class__: org_tamina_net_URL
};
var org_tamina_net_AssetURL = function(path,assetType) {
	if(assetType == null) {
		assetType = "js";
	}
	org_tamina_net_URL.call(this,path);
	this.assetType = assetType;
};
$hxClasses["org.tamina.net.AssetURL"] = org_tamina_net_AssetURL;
org_tamina_net_AssetURL.__name__ = ["org","tamina","net","AssetURL"];
org_tamina_net_AssetURL.__super__ = org_tamina_net_URL;
org_tamina_net_AssetURL.prototype = $extend(org_tamina_net_URL.prototype,{
	__class__: org_tamina_net_AssetURL
});
var org_tamina_net_XMLLoader = function() {
	this._configLoader = new XMLHttpRequest();
	this._configLoader.addEventListener("load",$bind(this,this.loadCompleteHandler));
	this._configLoader.addEventListener("error",$bind(this,this.loadErrorHandler));
	try {
		this._configLoader.overrideMimeType("text/xml");
	} catch( e ) {
		org_tamina_log_QuickLogger.warn("overrideMimeType not supported");
	}
	try {
		this._configLoader.responseType = "document";
	} catch( e1 ) {
		org_tamina_log_QuickLogger.warn("responseType not supported");
	}
	this.completeSignal = new msignal_Signal1();
	this.errorSignal = new msignal_Signal1();
};
$hxClasses["org.tamina.net.XMLLoader"] = org_tamina_net_XMLLoader;
org_tamina_net_XMLLoader.__name__ = ["org","tamina","net","XMLLoader"];
org_tamina_net_XMLLoader.prototype = {
	load: function(url) {
		org_tamina_log_QuickLogger.info("Config : init : " + url.path);
		this._configLoader.open("GET",url.path,true);
		this._configLoader.send(null);
	}
	,loadCompleteHandler: function(event) {
		org_tamina_log_QuickLogger.info("xml loaded : " + Std.string(this._configLoader.responseXML));
		this._configDocument = this._configLoader.responseXML;
		this.completeSignal.dispatch(this._configDocument);
	}
	,loadErrorHandler: function(error) {
		this.errorSignal.dispatch(error);
	}
	,__class__: org_tamina_net_XMLLoader
};
var org_tamina_utils_ClassUtils = function() { };
$hxClasses["org.tamina.utils.ClassUtils"] = org_tamina_utils_ClassUtils;
org_tamina_utils_ClassUtils.__name__ = ["org","tamina","utils","ClassUtils"];
org_tamina_utils_ClassUtils.expose = function(instance,rootInstanceName) {
	window[rootInstanceName] = instance;
};
var org_tamina_utils_ColorUtils = function() { };
$hxClasses["org.tamina.utils.ColorUtils"] = org_tamina_utils_ColorUtils;
org_tamina_utils_ColorUtils.__name__ = ["org","tamina","utils","ColorUtils"];
org_tamina_utils_ColorUtils.decColor2hex = function(color) {
	return "#000000";
};
org_tamina_utils_ColorUtils.invert = function(color) {
	if(color.length != 7) {
		throw new Error("Hex color must be six hex numbers in length.");
	}
	var hexnum = HxOverrides.substr(color.toUpperCase(),1,null);
	var splitnum = hexnum.split("");
	var resultnum = "";
	var simplenum = "FEDCBA9876".split("");
	var complexnum = { };
	complexnum.A = "5";
	complexnum.B = "4";
	complexnum.C = "3";
	complexnum.D = "2";
	complexnum.E = "1";
	complexnum.F = "0";
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		if(!isNaN(splitnum[i])) {
			resultnum += simplenum[splitnum[i]];
		} else if(complexnum[splitnum[i]]) {
			resultnum += complexnum[splitnum[i]];
		} else {
			throw new Error("Hex colors must only include hex numbers 0-9, and A-F");
		}
	}
	return "#" + resultnum;
};
var org_tamina_utils_DateUtils = function() { };
$hxClasses["org.tamina.utils.DateUtils"] = org_tamina_utils_DateUtils;
org_tamina_utils_DateUtils.__name__ = ["org","tamina","utils","DateUtils"];
org_tamina_utils_DateUtils.hourToFrenchString = function(pDate) {
	var result = "";
	var hours = Std.string(pDate.getHours());
	if(pDate.getHours() < 10) {
		hours = "0" + hours;
	}
	var minutes = Std.string(pDate.getMinutes());
	if(pDate.getMinutes() < 10) {
		minutes = "0" + minutes;
	}
	result = hours + "h" + minutes;
	return result;
};
org_tamina_utils_DateUtils.toFrenchString = function(pDate) {
	var month = Std.string(pDate.getMonth() + 1);
	if(pDate.getMonth() < 9) {
		month = "0" + month;
	}
	var day = Std.string(pDate.getDate());
	if(pDate.getDate() < 10) {
		day = "0" + day;
	}
	return day + "/" + month + "/" + pDate.getFullYear();
};
var org_tamina_utils_HTMLUtils = function() { };
$hxClasses["org.tamina.utils.HTMLUtils"] = org_tamina_utils_HTMLUtils;
org_tamina_utils_HTMLUtils.__name__ = ["org","tamina","utils","HTMLUtils"];
org_tamina_utils_HTMLUtils.getElementById = function(parent,id) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			var el = parent.children.item(i);
			var elId = org_tamina_utils_HTMLUtils.getAttribute(el,"id");
			if(elId == id) {
				result = el;
				break;
			} else {
				result = org_tamina_utils_HTMLUtils.getElementById(el,id);
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementByAttribute = function(parent,attribute,value) {
	var result = null;
	if(parent.children != null) {
		var _g1 = 0;
		var _g = parent.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(result == null) {
				var el = parent.children.item(i);
				var elId = org_tamina_utils_HTMLUtils.getAttribute(el,attribute);
				if(elId == value) {
					result = el;
					return result;
				} else {
					result = org_tamina_utils_HTMLUtils.getElementByAttribute(el,attribute,value);
				}
			} else {
				return result;
			}
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getAttribute = function(element,name) {
	var result = "";
	var _g1 = 0;
	var _g = element.attributes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var att = element.attributes.item(i);
		if(att.name == name) {
			result = att.value;
			break;
		}
	}
	return result;
};
org_tamina_utils_HTMLUtils.getEventPath = function(event) {
	var result = [];
	if(event.target != null && js_Boot.__instanceof(event.target,HTMLElement)) {
		result = org_tamina_utils_HTMLUtils.recursivelyFindParent(event.target);
	}
	return result;
};
org_tamina_utils_HTMLUtils.recursivelyFindParent = function(element) {
	var result = [];
	result.push(element);
	if(element.nodeName.toLowerCase() != "body" && element.parentNode != null) {
		result = result.concat(org_tamina_utils_HTMLUtils.recursivelyFindParent(element.parentNode));
	}
	return result;
};
org_tamina_utils_HTMLUtils.findParent = function(element,doesMatch,maxLevel,currLevel) {
	if(currLevel == null) {
		currLevel = 0;
	}
	if(maxLevel == null) {
		maxLevel = 10;
	}
	if(doesMatch(element)) {
		return element;
	}
	if(doesMatch(element.parentElement)) {
		return element.parentElement;
	}
	if(++currLevel < maxLevel) {
		return org_tamina_utils_HTMLUtils.findParent(element.parentElement,doesMatch,maxLevel,currLevel);
	}
	return null;
};
org_tamina_utils_HTMLUtils.removeElement = function(element) {
	var result = true;
	if($bind(element,element.remove) != null) {
		element.remove();
	} else if(element.parentElement != null && element.parentElement.contains(element)) {
		element.parentElement.removeChild(element);
	} else {
		result = false;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getElementOffset = function(element) {
	var result = { top : 0, left : 0};
	var rect = element.getBoundingClientRect();
	var body = window.document.body;
	var win = window;
	result.top = Math.round(rect.top + win.pageYOffset - element.clientTop);
	result.left = Math.round(rect.left + win.pageXOffset - element.clientLeft);
	return result;
};
org_tamina_utils_HTMLUtils.getTouchPosition = function(element,evt) {
	var offset = org_tamina_utils_HTMLUtils.getElementOffset(element);
	var touch = evt.touches.item(0);
	return new org_tamina_geom_Point(touch.pageX - offset.left,touch.pageY - offset.top);
};
org_tamina_utils_HTMLUtils.isTouchSupported = function() {
	var result = !!(('ontouchstart' in window)
            || (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0)
            || (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0));
	return result;
};
org_tamina_utils_HTMLUtils.getBrowserType = function(agent) {
	if(agent == null) {
		agent = window.navigator.userAgent;
	}
	var result = org_tamina_utils_BrowserType.Unknown;
	if(new EReg("WebKit","").match(agent)) {
		if(new EReg("Chrome","").match(agent)) {
			result = org_tamina_utils_BrowserType.Chrome;
			var isAndroid = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
			if(isAndroid) {
				result = org_tamina_utils_BrowserType.Android;
			}
		} else if(new EReg("Safari","").match(agent)) {
			result = org_tamina_utils_BrowserType.Safari;
		} else {
			result = org_tamina_utils_BrowserType.Opera;
		}
	} else if(new EReg("Opera","").match(agent)) {
		result = org_tamina_utils_BrowserType.Opera;
	} else if(new EReg("Mozilla","").match(agent)) {
		var isIE = agent.indexOf("MSIE ") > -1 || agent.indexOf("Trident/") > -1 || agent.indexOf("Edge/") > -1;
		var isAndroid1 = agent.indexOf("Mozilla/5.0") > -1 && agent.indexOf("Android ") > -1 && agent.indexOf("AppleWebKit") > -1;
		if(isIE) {
			result = org_tamina_utils_BrowserType.IE;
		} else if(isAndroid1) {
			result = org_tamina_utils_BrowserType.Android;
		} else {
			result = org_tamina_utils_BrowserType.FireFox;
		}
	} else {
		result = org_tamina_utils_BrowserType.IE;
	}
	return result;
};
org_tamina_utils_HTMLUtils.getIEVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var ieRegex = new EReg("MSIE\\s([0-9]+)","");
	var tridentRegex = new EReg("Trident/.*rv:([0-9]+)","");
	var edgeRegex = new EReg("Edge/([0-9]+)","");
	var regexArray = [ieRegex,tridentRegex,edgeRegex];
	var _g = 0;
	while(_g < regexArray.length) {
		var regex = regexArray[_g];
		++_g;
		if(regex.match(ua)) {
			return Std.parseInt(regex.matched(1));
		}
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getChromeVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var chromeRegex = new EReg("Chrome/([0-9]+)","");
	if(chromeRegex.match(ua)) {
		return Std.parseInt(chromeRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getFirefoxVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var firefoxRegex = new EReg("Firefox/([0-9]+)","");
	if(firefoxRegex.match(ua)) {
		return Std.parseInt(firefoxRegex.matched(1));
	}
	return -1;
};
org_tamina_utils_HTMLUtils.getSafariVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var safariRegex = new EReg("Version/([0-9]+)","");
	if(safariRegex.match(ua)) {
		return Std.parseInt(safariRegex.matched(1));
	}
	return -1;
};
var org_tamina_utils_BrowserType = { __ename__ : ["org","tamina","utils","BrowserType"], __constructs__ : ["Chrome","Android","Safari","WebKitOther","FireFox","Opera","IE","Unknown"] };
org_tamina_utils_BrowserType.Chrome = ["Chrome",0];
org_tamina_utils_BrowserType.Chrome.toString = $estr;
org_tamina_utils_BrowserType.Chrome.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Android = ["Android",1];
org_tamina_utils_BrowserType.Android.toString = $estr;
org_tamina_utils_BrowserType.Android.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Safari = ["Safari",2];
org_tamina_utils_BrowserType.Safari.toString = $estr;
org_tamina_utils_BrowserType.Safari.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.WebKitOther = ["WebKitOther",3];
org_tamina_utils_BrowserType.WebKitOther.toString = $estr;
org_tamina_utils_BrowserType.WebKitOther.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.FireFox = ["FireFox",4];
org_tamina_utils_BrowserType.FireFox.toString = $estr;
org_tamina_utils_BrowserType.FireFox.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Opera = ["Opera",5];
org_tamina_utils_BrowserType.Opera.toString = $estr;
org_tamina_utils_BrowserType.Opera.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.IE = ["IE",6];
org_tamina_utils_BrowserType.IE.toString = $estr;
org_tamina_utils_BrowserType.IE.__enum__ = org_tamina_utils_BrowserType;
org_tamina_utils_BrowserType.Unknown = ["Unknown",7];
org_tamina_utils_BrowserType.Unknown.toString = $estr;
org_tamina_utils_BrowserType.Unknown.__enum__ = org_tamina_utils_BrowserType;
var org_tamina_utils_NumberUtils = function() { };
$hxClasses["org.tamina.utils.NumberUtils"] = org_tamina_utils_NumberUtils;
org_tamina_utils_NumberUtils.__name__ = ["org","tamina","utils","NumberUtils"];
org_tamina_utils_NumberUtils.toFixed = function(x,decimalPlaces) {
	if(isNaN(x)) {
		return "NaN";
	} else {
		var a = 10;
		var n = decimalPlaces;
		var t = 1;
		var r = 0;
		while(true) {
			if((n & 1) != 0) {
				t = a * t;
			}
			n >>= 1;
			if(n == 0) {
				r = t;
				break;
			} else {
				a *= a;
			}
		}
		var t1 = r;
		var s = Std.string((x * t1 | 0) / t1);
		var i = s.indexOf(".");
		if(i != -1) {
			var _g1 = HxOverrides.substr(s,i + 1,null).length;
			var _g = decimalPlaces;
			while(_g1 < _g) {
				var i1 = _g1++;
				s += "0";
			}
		} else {
			s += ".";
			var _g11 = 0;
			var _g2 = decimalPlaces;
			while(_g11 < _g2) {
				var i2 = _g11++;
				s += "0";
			}
		}
		return s;
	}
};
org_tamina_utils_NumberUtils.roundDec = function(numIn,decimalPlaces) {
	var nExp = Math.pow(10,decimalPlaces);
	var nRetVal = Math.round(numIn * nExp) / nExp;
	return nRetVal;
};
org_tamina_utils_NumberUtils.floorDec = function(numIn,decimalPlaces) {
	var nExp = Math.pow(10,decimalPlaces);
	var nRetVal = Math.floor(numIn * nExp) / nExp;
	return nRetVal;
};
org_tamina_utils_NumberUtils.ceilDec = function(numIn,decimalPlaces) {
	var nExp = Math.pow(10,decimalPlaces);
	var nRetVal = Math.ceil(numIn * nExp) / nExp;
	return nRetVal;
};
org_tamina_utils_NumberUtils.exp = function(a,n) {
	var t = 1;
	var r = 0;
	while(true) {
		if((n & 1) != 0) {
			t = a * t;
		}
		n >>= 1;
		if(n == 0) {
			r = t;
			break;
		} else {
			a *= a;
		}
	}
	return r;
};
var org_tamina_utils_ObjectUtils = function() { };
$hxClasses["org.tamina.utils.ObjectUtils"] = org_tamina_utils_ObjectUtils;
org_tamina_utils_ObjectUtils.__name__ = ["org","tamina","utils","ObjectUtils"];
org_tamina_utils_ObjectUtils.merge = function(fromObject,toObject) {
	var fields = Reflect.fields(fromObject);
	var _g1 = 0;
	var _g = fields.length;
	while(_g1 < _g) {
		var i = _g1++;
		var field = fields[i];
		if(Object.prototype.hasOwnProperty.call(toObject,field)) {
			toObject[field] = Reflect.field(fromObject,field);
		}
	}
};
org_tamina_utils_ObjectUtils.filterById = function(source) {
	return function(obj) {
		return source.id == obj.id;
	};
};
var org_tamina_utils_UID = function() { };
$hxClasses["org.tamina.utils.UID"] = org_tamina_utils_UID;
org_tamina_utils_UID.__name__ = ["org","tamina","utils","UID"];
org_tamina_utils_UID.getUID = function() {
	var result = new Date().getTime();
	if(result <= org_tamina_utils_UID._lastUID) {
		result = org_tamina_utils_UID._lastUID + 1;
	}
	org_tamina_utils_UID._lastUID = result;
	return result;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
msignal_SlotList.NIL = new msignal_SlotList(null,null);
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
mconsole_ConsoleView.CONSOLE_STYLES = "#console {\r\n\tfont-family:monospace;\r\n\tbackground-color:#002B36;\r\n\tbackground-color:rgba(0%,16.9%,21.2%,0.95);\r\n\tpadding:8px;\r\n\theight:600px;\r\n\tmax-height:600px;\r\n\toverflow-y:scroll;\r\n\tposition:absolute;\r\n\tleft:0px;\r\n\ttop:0px;\r\n\tright:0px;\r\n\tmargin:0px;\r\n\tz-index:10000;\r\n}\r\n#console a { text-decoration:none; }\r\n#console a:hover div { background-color:#063642 }\r\n#console a div span { display:none; float:right; color:white; }\r\n#console a:hover div span { display:block; }";
mconsole_Console.defaultPrinter = new mconsole_ConsoleView();
mconsole_Console.printers = [mconsole_Console.defaultPrinter];
mconsole_Console.groupDepth = 0;
mconsole_Console.times = new haxe_ds_StringMap();
mconsole_Console.counts = new haxe_ds_StringMap();
mconsole_Console.running = false;
mconsole_Console.dirxml = "dirxml";
mconsole_Console.hasConsole = mconsole_Console.detectConsole();
mconsole_ConsoleMacro.__meta__ = { obj : { IgnoreCover : null}};
mconsole_StackHelper.filters = mconsole_StackHelper.createFilters();
org_tamina_events_XMLHttpRequestEvent.PROGRESS = "progress";
org_tamina_events_XMLHttpRequestEvent.LOAD = "load";
org_tamina_events_XMLHttpRequestEvent.ERROR = "error";
org_tamina_events_html_ImageEvent.__meta__ = { obj : { deprecated : null}};
org_tamina_events_html_ImageEvent.LOAD = "load";
org_tamina_events_html_ImageEvent.ERROR = "error";
org_tamina_log__$LogLevel_LogLevel_$Impl_$.INFO = 0;
org_tamina_log__$LogLevel_LogLevel_$Impl_$.DEBUG = 1;
org_tamina_log__$LogLevel_LogLevel_$Impl_$.WARN = 2;
org_tamina_log__$LogLevel_LogLevel_$Impl_$.ERROR = 3;
org_tamina_log__$LogLevel_LogLevel_$Impl_$.NONE = 4;
org_tamina_log_QuickLogger.level = 0;
org_tamina_utils_UID._lastUID = 0;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
